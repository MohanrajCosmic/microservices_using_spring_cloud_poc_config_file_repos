# server:
#   port: 8082
#     servlet:
#      context-path: /user-service/api

server:
  port: 0
  servlet:
    context-path: /user-service/api

#  Spring Cloud OpenFeign with Resilience4j, Feign's timeout alone does not work reliably
#  unless the circuit breaker timeout (timelimiter.timeoutDuration) is set slightly higher than Feign's timeout
spring:
  application:
    name: User-Service
  cloud:
    config:
      enabled: false
    openfeign:
      client:
        config:
          ORDER-SERVICE:
            connectTimeout: 2000
            readTimeout: 6000
      circuitbreaker:
        enabled: true   # Enables Feign integration with Resilience4j
      kafka:
        bootstrap-servers: localhost:9092

app:
  message: "Hello from local Profile!"

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true
    registryFetchIntervalSeconds: 5  # Refresh service registry every 5s
  instance:
    # instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${server.port}
    preferIpAddress: true  # ✅ Use IP instead of hostname
    # hostname: localhost  # ✅ Ensures local resolution

management:
  endpoints:
    web:
      exposure:
        include: health, refresh, info, metrics, circuitbreakers, bus-refresh
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

resilience4j.circuitbreaker:
  configs:
    default:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 2
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      waitDurationInOpenState: 15s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
      slowCallDurationThreshold: 5s
    defaultSlowApi:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 2
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
      slowCallDurationThreshold: 8s
  instances:
    orderCircuitBreaker:
      baseConfig: default
      slowCallDurationThreshold: 5s
      recordExceptions:
        - feign.FeignException  # ✅ Works for all Feign-related failures
        - java.util.concurrent.TimeoutException
    #        - java.net.SocketTimeoutException
    #        - org.springframework.web.client.HttpServerErrorException
    #        - java.io.IOException
    orderCircuitBreakerSlowApi:
      baseConfig: defaultSlowApi
      slowCallDurationThreshold: 8s

# These value should be > feign timeout threshold
resilience4j:
  timelimiter:
    configs:
      default:
        timeoutDuration: 12s  # ✅ Should be higher than Feign timeout
    instances:
      orderCircuitBreaker:
        baseConfig: default
        timeoutDuration: 12s   # ✅ Higher than Feign's 6s timeout
      orderCircuitBreakerSlowApi:
        baseConfig: default
        timeoutDuration: 12s

#retry:
#  feign:
#    enabled: false  # ✅ Disable Feign retries to ensure timeout occurs immediately

springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs  # Default path for OpenAPI JSON
    show-actuator: true
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    persist-authorization: true

logging:
  level:
    org.springframework.cloud.openfeign: INFO
    feign.Logger: INFO
    feign.Request: INFO
