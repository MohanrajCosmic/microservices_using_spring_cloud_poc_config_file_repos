# server:
#   port: 8081

server:
  port: 0

spring:
  application:
    name: User-Service

app:
  message: "Hello from local Profile!"

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true
    registryFetchIntervalSeconds: 5  # Refresh service registry every 5s
  instance:
    # instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${server.port}
    preferIpAddress: true  # ✅ Use IP instead of hostname
    # hostname: localhost  # ✅ Ensures local resolution

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

resilience4j.circuitbreaker:
  configs:
    default:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 5
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
      slowCallDurationThreshold: 5s
    defaultSlowApi:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 5
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
      slowCallDurationThreshold: 8s
  instances:
    orderCircuitBreaker:
      baseConfig: default
      slowCallDurationThreshold: 5s
      recordExceptions:
       - feign.FeignException  # ✅ Works for all Feign-related failures
    orderCircuitBreakerSlowApi:
      baseConfig: defaultSlowApi
      slowCallDurationThreshold: 8s

# timelimiter:
#   configs:
#     default:
#       timeoutDuration: 8s
#   instances:
#     orderCircuitBreaker:
#       baseConfig: default
#       timeoutDuration: 8s
#     orderCircuitBreakerSlowApi:
#       baseConfig: default
#       timeoutDuration: 12s

feign:
  client:
    config:
      ORDER-SERVICE:     # exact service id has to be used here
        connectTimeout: 2000   # 2 seconds
        readTimeout: 9000      # 12 seconds
        loggerLevel: FULL
    circuitbreaker:
      enabled: true   # To integrate feign exceptions with circuit breaker

# spring:
#   cloud:
#     openfeign:
#       client:
#         config:
#           ORDER-SERVICE:
#             connectTimeout: 5000
#             readTimeout: 5000
#         circuitbreaker:
#           enabled: true   # To integrate feign exceptions with circuit breaker

retry:
  feign:
    enabled: false  # ✅ Disable Feign retries to ensure timeout occurs immediately

logging:
  level:
    feign: DEBUG
    org.springframework.cloud.openfeign: DEBUG
    resilience4j: DEBUG
